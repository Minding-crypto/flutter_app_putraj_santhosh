import 'dart:async';

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:carousel_slider/carousel_slider.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:instaclone/settings.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:in_app_purchase_android/in_app_purchase_android.dart';

class BuyCreditsPage extends StatefulWidget {
  const BuyCreditsPage({super.key});

  @override
  BuyCreditsPageState createState() => BuyCreditsPageState();
}

class BuyCreditsPageState extends State<BuyCreditsPage> {
  final InAppPurchase _inAppPurchase = InAppPurchase.instance;
  List<ProductDetails> _products = [];
  StreamSubscription<List<PurchaseDetails>>? _subscription;

  final List<Map<String, dynamic>> _creditPackages = [
    {'credits': 20, 'productId': 'credits_20', 'banner': ''},
    {'credits': 50, 'productId': 'credits_50', 'banner': 'Most Popular'},
    {'credits': 100, 'productId': 'credits_100', 'banner': 'Saver Deal'},
  ];

  final List<String> _carouselItems = [
    'Welcome to Our App! Enjoy seamless services.',
    'Buy credits easily and use them for various features.',
    'Stay tuned for exciting updates and new features!',
  ];

  @override
  void initState() {
    super.initState();
    _initInAppPurchase();
  }

  Future<void> _initInAppPurchase() async {
    final bool available = await _inAppPurchase.isAvailable();
    if (!available) {
      // The store cannot be reached or accessed. Update the UI accordingly.
      print('store not available');
      return;
    }

    const Set<String> _kIds = {'credits_20', 'credits_50', 'credits_100'};
    final ProductDetailsResponse response =
        await _inAppPurchase.queryProductDetails(_kIds);

    setState(() {
      _products = response.productDetails;
    });

    _subscription =
        _inAppPurchase.purchaseStream.listen(_handlePurchaseUpdates);
  }

  void _handlePurchaseUpdates(List<PurchaseDetails> purchaseDetailsList) {
    purchaseDetailsList.forEach((PurchaseDetails purchaseDetails) async {
      if (purchaseDetails.status == PurchaseStatus.purchased) {
        // Handle the purchase
        await _deliverProduct(purchaseDetails);
        // Complete the purchase
        await _inAppPurchase.completePurchase(purchaseDetails);
      }
    });
  }

  Future<void> _deliverProduct(PurchaseDetails purchaseDetails) async {
    int credits = 0;
    switch (purchaseDetails.productID) {
      case 'credits_20':
        credits = 20;
        break;
      case 'credits_50':
        credits = 50;
        break;
      case 'credits_100':
        credits = 100;
        break;
    }

    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      final DocumentSnapshot userDoc = await FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .get();
      final userData = userDoc.data() as Map<String, dynamic>?;

      if (userData != null) {
        int currentCredits = userData['credits'] ?? 0;
        int newCredits = currentCredits + credits;

        try {
          await FirebaseFirestore.instance
              .collection('users')
              .doc(user.uid)
              .update({'credits': newCredits});
          setState(() {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                  content: Text('$credits credits purchased successfully!')),
            );
          });
        } catch (e) {
          print('Error updating user credits: $e');
        }
      }
    }
  }

Future<void> _buyProduct(ProductDetails product) async {
  final PurchaseParam purchaseParam = PurchaseParam(productDetails: product);
  if (product is GooglePlayProductDetails) {
    await InAppPurchase.instance.buyConsumable(purchaseParam: purchaseParam);
  } else {
    await InAppPurchase.instance.buyNonConsumable(purchaseParam: purchaseParam);
  }
}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Buy Credits', style: TextStyle(color: Colors.white)),
        iconTheme: const IconThemeData(color: Colors.white),
        backgroundColor: const Color.fromARGB(255, 0, 0, 0),
      ),
      backgroundColor: Colors.black,
      body: SingleChildScrollView(
        child: Column(
          children: [
            const SizedBox(height: 40),
            CarouselSlider(
              options: CarouselOptions(
                height: 400.0,
                autoPlay: true,
                autoPlayInterval: const Duration(seconds: 3),
                autoPlayAnimationDuration: const Duration(milliseconds: 800),
                enlargeCenterPage: true,
              ),
              items: _carouselItems.map((item) {
                return Builder(
                  builder: (BuildContext context) {
                    return Container(
                      width: MediaQuery.of(context).size.width,
                      margin: const EdgeInsets.symmetric(horizontal: 5.0),
                      decoration: BoxDecoration(
                        color: Colors.amber,
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Center(
                        child: Text(
                          item,
                          style: const TextStyle(fontSize: 16.0),
                        ),
                      ),
                    );
                  },
                );
              }).toList(),
            ),
            const SizedBox(height: 30),
            _products.isEmpty
                ? const Center(
                    child: CircularProgressIndicator(),
                  )
                : ListView.builder(
                    physics: const NeverScrollableScrollPhysics(),
                    shrinkWrap: true,
                    itemCount: _creditPackages.length,
                    itemBuilder: (context, index) {
                      final package = _creditPackages[index];
                   ProductDetails? product;
try {
  product = _products.firstWhere(
    (p) => p.id == package['productId'],
  );
} catch (e) {
  // Product not found
  return const SizedBox.shrink(); // Don't show if product is not available
}

// If it's an Android product, cast it to GooglePlayProductDetails
final androidProduct = product is GooglePlayProductDetails
    ? product as GooglePlayProductDetails
    : null;
                    if (product.id.isEmpty) {
  return const SizedBox.shrink(); // Don't show if product is not available
}



                      return Container(
                        height: 180,
                        margin: const EdgeInsets.symmetric(
                            vertical: 10, horizontal: 20),
                        padding: const EdgeInsets.all(10),
                        decoration: BoxDecoration(
                          color: Colors.grey[850],
                          borderRadius: BorderRadius.circular(10),
                        ),
                        child: Stack(
                          children: [
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.center,
                              children: [
                                const SizedBox(height: 25),
                                Text('${package['credits']} Credits',
                                    style: const TextStyle(
                                        color: Colors.white,
                                        fontWeight: FontWeight.bold,
                                        fontSize: 30)),
                                const SizedBox(height: 2),
                              Text(androidProduct?.price ?? product.price,
    style: const TextStyle(color: Colors.white)),
                                const SizedBox(height: 20),
                                Align(
                                  alignment: Alignment.bottomCenter,
                                  child: SizedBox(
                                    width: 250,
                                    height: 50,
                                    child: ElevatedButton(
                                      onPressed: () => _buyProduct(product!),
                                      style: ElevatedButton.styleFrom(
                                        foregroundColor: Colors.white,
                                        backgroundColor: const Color.fromARGB(
                                            255, 55, 0, 255),
                                        shape: RoundedRectangleBorder(
                                          borderRadius:
                                              BorderRadius.circular(25),
                                        ),
                                      ),
                                    child: Text(
  'Buy ${androidProduct?.price ?? product.price}',
  style: const TextStyle(
    fontWeight: FontWeight.bold,
    fontSize: 17,
  ),
),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            if (package['credits'] != 20 &&
                                package['banner'].isNotEmpty)
                              Positioned(
                                top: 0,
                                left: 0,
                                child: Container(
                                  padding: const EdgeInsets.symmetric(
                                      horizontal: 8, vertical: 4),
                                  decoration: const BoxDecoration(
                                    color: Colors.red,
                                    borderRadius: BorderRadius.only(
                                      topLeft: Radius.circular(10),
                                      bottomRight: Radius.circular(10),
                                    ),
                                  ),
                                  child: Text(
                                    package['banner'],
                                    style: const TextStyle(
                                        color: Colors.white,
                                        fontWeight: FontWeight.bold),
                                  ),
                                ),
                              ),
                          ],
                        ),
                      );
                    },
                  ),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  TextButton(
                    onPressed: () async {
                      final Uri url =
                          Uri.parse('https://ratemeappr.github.io/RateMe/');
                      if (!await launchUrl(url)) {
                        throw Exception('Could not launch $url');
                      }
                    },
                    child: const Text('Privacy Policy'),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _subscription?.cancel();
    super.dispose();
  }
}
